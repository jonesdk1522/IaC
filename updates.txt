  // Join with colons and compress zeros
  let ipv6 = parts.join(":");
  
  // Find longest sequence of zeros for compression
  let longestZeros = "";
  let longestZerosLength = 0;
  const matches = ipv6.match(/(?:(?:^|:)0(?::0)*(?::|$))/g) || [];
  
  for (const match of matches) {
    if (match.length > longestZerosLength) {
      longestZeros = match;
      longestZerosLength = match.length;
    }
  }

  // Replace longest run of zeros with ::
  if (longestZerosLength > 0) {
    ipv6 = ipv6.replace(longestZeros, "::");
  }

  // Clean up edge cases
  ipv6 = ipv6.replace(/^::/, "::").replace(/::$/, "::");
  
  return ipv6;
